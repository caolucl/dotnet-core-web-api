#trigger:
#  branches:
#    include:
#    - refs/heads/main
  #paths:
  # include:
  #   - aspnet-api/*
trigger: none
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/$(Build.SourceBranchName)
variables:

- name: appName
  value : 'aspnet-api'
- name: dockerfilePath
  value : '$(Build.SourcesDirectory)/Dockerfile'
- name: imageName
  value: sample/$(appName)
- name: azure-container-registry
  value: lcaodev1ACR
#- name: system_accesstoken
#  value : $(System.AccessToken)
- name: container-registery-loginname
  value: lcaodev1.azurecr.io

stages:
- stage: Build
  displayName: Build and push artifact stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      persistCredentials: true
      
    # Install docker
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    #  Build and push an image to container registry
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(azure-container-registry)

    - task: Docker@2
      displayName: Build an image for $(appName)
      inputs:
        command: build
        buildContext: '$(Build.SourcesDirectory)'
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(azure-container-registry)
        tags: |
          latest
          $(build.buildNumber)

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          #docker export lcaodev1.azurecr.io/sample/aspnet-api:latest -o $(imageName).tar.gz
          #docker save --output $(imageName).tar.gz $(container-registery-loginname)/$(imageName):latest
          docker save $(container-registery-loginname)/$(imageName):latest | gzip > $(container-registery-loginname)_latest.tar.gz
          docker images
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(container-registery-loginname)_latest.tar.gz'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    #- task: Docker@2
    #  displayName: Push an image to container registry
    #  inputs:
    #    containerRegistry: 'lcaodev1ACR'
    #    repository: '$(imageName)'
    #    command: 'push'
    #    tags: |
    #      latest
    #      $(build.buildNumber)

    - powershell: |
        Set-Content -Path "$(Build.ArtifactStagingDirectory)/$(appName)" -Value (docker inspect $(container-registery-loginname)/$(imageName):latest -f '{{ .Id }}')
      displayName: Saving container hashes
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          docker rmi lcaodev1.azurecr.io/sample/aspnet-api:latest
        workingDirectory: '$(Build.ArtifactStagingDirectory)'

- stage: Check_And_Push
  dependsOn:
  - Build
  condition: succeeded('Build')
  displayName: Check docker image and push
  jobs:
  - job: CheckImage
    displayName: Check
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
      persistCredentials: true

    # Install docker
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'drop/**'
        downloadPath: '$(System.ArtifactsDirectory)'
        cleanDestinationFolder: true
    
    #- task: CmdLine@2
    #  inputs:
    #    script: |
    #      tar -xf $(container-registery-loginname)_latest.tar.gz
    #    workingDirectory: '$(System.ArtifactsDirectory)/drop'
    - script: |
        docker load < $(container-registery-loginname)_latest.tar.gz
        docker images
      workingDirectory: '$(System.ArtifactsDirectory)/drop'
      displayName: import docker image
